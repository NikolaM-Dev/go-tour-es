Más tipos: structs, slices y maps.
Aprende a definir tipos basados en otros ya existentes: esta lección cubre structs, arrays, slices y maps.

Los autores de Go
https://golang.org

* Punteros

Go tiene punteros.
Un puntero contiene la dirección de memoria de un valor.

El tipo `*T` es un puntero a un valor `T`. Su valor cero es `nil`.

	var p *int

El operador `&` genera un puntero a su operando.

	i := 42
	p = &i

El operador `*` denota el valor subyacente del puntero.

	fmt.Println(*p) // lee i a través del puntero p
	*p = 21         // establece i a través del puntero p

Esto se conoce como "desreferenciar" o "indirección".

A diferencia de C, Go no tiene aritmética de punteros.

.play moretypes/pointers.go

* Structs

Un `struct` es una colección de campos.

.play moretypes/structs.go

* Campos de un struct

Los campos de un struct se acceden usando un punto.

.play moretypes/struct-fields.go

* Punteros a structs

Los campos de struct se pueden acceder a través de un puntero a un struct.

Para acceder al campo `X` de un struct cuando tenemos el puntero de struct `p` podríamos
escribir `(*p).X`.
Sin embargo, esa notación es engorrosa, por lo que el lenguaje nos permite en su lugar
escribir solo `p.X`, sin la indirección explícita.

.play moretypes/struct-pointers.go

* Struct Literal

Un struct literal denota el valor de struct recién creado listando los valores de sus campos.

Puedes listar solo un subconjunto de campos usando la sintaxis `Nombre:`. (Y el orden de los campos nombrados es irrelevante.)

El prefijo especial `&` devuelve un puntero al valor de struct.

.play moretypes/struct-literals.go


* Arrays

El tipo `[n]T` es un array de `n` valores de tipo `T`.

La expresión

	var a [10]int

declara una variable `a` como un array de diez enteros.

El tamaño de un array es parte de su tipo, por lo que los arrays no se pueden redimensionar.
Esto parece limitante, pero no te preocupes;
Go provee una forma conveniente de trabajar con arrays.

.play moretypes/array.go


* Slices

Un array tiene un tamaño fijo.
Un slice, por otro lado, es una vista dinámicamente dimensionada
y flexible de los elementos de un array.
En la práctica, los slices son mucho más comunes que los arrays.

El tipo `[]T` es un slice con elementos de tipo `T`.

Un slice se forma especificando dos índices, un límite inferior y
superior, separados por dos puntos:

	a[low : high]

Esto selecciona un rango semiabierto que incluye el primer
elemento, pero excluye el último.

La siguiente expresión crea un slice que incluye
elementos 1 a 3 de `a`:

	a[1:4]

.play moretypes/slices.go


* Los slices son como referencias a arrays

Un slice no almacena ningún dato,
solo describe una sección de un array subyacente.

Cambiar los elementos de un slice modifica los
correspondientes elementos de su array subyacente.

Otros slices que comparten el mismo array subyacente verán esos cambios.

.play moretypes/slices-pointers.go


* Slice literal

Un slice literal es como un array literal sin la longitud.

Esto es un array literal:

	[3]bool{true, true, false}

Y esto crea el mismo array que arriba y
luego construye un slice que lo referencia:

	[]bool{true, true, false}

.play moretypes/slice-literals.go


* Slice defaults

Al utilizar un slice, puedes omitir los límites alto o bajo para usar sus valores predeterminados en su lugar.

El defecto es cero para el límite inferior y la longitud del slice para el límite superior.

Para el array

	var a [10]int

estas expresiones de slice son equivalentes:

	a[0:10]
	a[:10]
	a[0:]
	a[:]

.play moretypes/slice-bounds.go


* Longitud y capacidad de un slice

Un slice tiene tanto una _longitud_ como una _capacidad_.

La longitud de un slice es el número de elementos que contiene.

La capacidad de un slice es el número de elementos en el array subyacente,
contando desde el primer elemento en el slice.

La longitud y la capacidad de un slice `s` se pueden obtener usando las expresiones
`len(s)` and `cap(s)`.

Puedes extender la longitud de un slice haciendo un re-slicing del mismo,
siempre que tenga capacidad suficiente.
Trata de cambiar una de las operaciones de slice en el programa de ejemplo para extenderlo
mas allá de su capacidad y ve lo que sucede.

.play moretypes/slice-len-cap.go


* Nil slices

El valor cero de un slice es `nil`.

Un slice nulo tiene una longitud y capacidad de 0
y no tiene array subyacente.

.play moretypes/nil-slices.go


* Creando un slice con make

Los slices pueden ser creados con la función nativa `make`;
así es como se crean arrays de tamaño dinámico.

La función `make` asigna un array inicializado con sus zero values
y retorna un slice que referencia a ese array:

	a := make([]int, 5)  // len(a)=5

Para especificar una capacidad, pasa un tercer argumento a `make`:

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play moretypes/making-slices.go


* Slices de slices

Los slices pueden contener cualquier tipo, incluyendo otros slices.

.play moretypes/slices-of-slice.go


* Agregando elementos a un slice

Es común agregar nuevos elementos a un slice, por lo que Go provee la función nativa
`append`. La [[https://golang.org/pkg/builtin/#append][documentación]]
del paquete nativo describe `append`.

	func append(s []T, vs ...T) []T

El primer parámetro `s` de `append` es un slice de tipo `T`, y el resto son
valores `T` para agregar al slice.

El valor resultante de `append` es un slice que contiene todos los elementos del
slice original más los valores provistos.

Si el array subyacente de `s` es muy pequeño para contener todos los valores provistos,
se asignará un array más grande. El slice resultante apuntará al nuevo
array asignado.

Para aprender más sobre slices, lee el artículo [[https://blog.golang.org/go-slices-usage-and-internals][Slices: usage and internals]].

.play moretypes/append.go


* Range

El `range` de un `for` itera sobre un slice o map.

Cuando se itera sobre un slice, se retornan dos valores por cada iteración.
El primero es el índice, y el segundo es una copia del elemento en ese índice.

.play moretypes/range.go

* Range continuo

Puedes omitir el índice o el valor asignando a `_`.

    for i, _ := range pow
    for _, value := range pow

Si solo quieres el índice, puedes omitir la segunda variable.

    for i := range pow

.play moretypes/range-continued.go

* Ejercicio: Slices

Implementa `Pic`. Debe retornar un slice de longitud `dy`, cada elemento el cual es un slice de `dx` enteros sin signo de 8 bits. Cuando ejecutes el programa, mostrará tu imagen, interpretando los enteros como valores de escala de grises (bueno, de escala de azules).

La elección de la imagen es tuya. Las funciones interesantes incluyen `(x+y)/2`, `x*y`, y `x^y`.

(Necesitarás usar un loop para asignar cada `[]uint8` dentro de `[][]uint8`.)

(Usa `uint8(intValue)` para convertir entre tipos.)

.play moretypes/exercise-slices.go

* Maps

Un map asocia claves a valores.

El valor cero de un map es `nil`.
Un map nulo no tiene claves, ni se pueden agregar claves.

La funcion `make` retorna un map del tipo dado,
inicilizado y listo para usar.

.play moretypes/maps.go

* Map literals

Los Map literals son como los struct literals, pero las claves son requeridas.

.play moretypes/map-literals.go

* Map literals continuos

Si el tipo de nivel superior es solo un nombre de tipo, puedes omitirlo de los elementos del literal.

.play moretypes/map-literals-continued.go

* Mutando Maps

Insertar o actualizar un elemento en el map `m`:

	m[key] = elem

Obtener un elemento:

	elem = m[key]

Eliminar un elemento:

	delete(m, key)

Prueba que una clave esté presente con una asignación de dos valores:

	elem, ok = m[key]

Si `key` está en `m`, entonces `ok` es `true`.

Si `key` no está en `m`, entonces `elem` es el valor cero para el tipo de elemento del map.

*Nota:* Si `elem` u `ok` no han sido declarados aún, puedes usar la forma breve de declaración:

	elem, ok := m[key]

.play moretypes/mutating-maps.go

* Ejercicio: Maps

Implementa `WordCount`. Debe retornar un map con la cantidad de veces que aparece cada "palabra" en el string `s`. La función `wc.Test` ejecuta un conjunto de tests contra la función provista e imprime el éxito o fallo.

Puedes encontrar [[https://golang.org/pkg/strings/#Fields][strings.Fields]] útil.

.play moretypes/exercise-maps.go

* Valores de función

Las funciones son valores también. Pueden ser pasadas como argumentos a funciones y retornadas desde funciones.

Los valores de función pueden ser usados como argumentos de funciones y valores de retorno.

.play moretypes/function-values.go

* Funciones closures

Las funciones de Go pueden ser closures. Un closure es un valor de función que referencia variables fuera de su cuerpo. La función puede acceder y asignar a las variables referenciadas; en este sentido la función está "ligada" a las variables.

Por ejemplo, la función `sumador` retorna un closure. Cada closure está ligado a su propia variable `sum`.

.play moretypes/function-closures.go

* Ejercicio: Fibonacci closure

Vamos a divertirnos con funciones.

Implementa una función `fibonacci` que retorne una función (un closure) que
retorne sucesivos [[https://en.wikipedia.org/wiki/Fibonacci_number][números de Fibonacci]]
(0, 1, 1, 2, 3, 5, ...).

.play moretypes/exercise-fibonacci-closure.go

* ¡Felicitaciones!

¡Has terminado esta lección!

Puedes volver a la lista de [[/list][módulos]] para encontrar qué aprender a continuación, o continuar con la [[javascript:click('.next-page')][siguiente lección]].
