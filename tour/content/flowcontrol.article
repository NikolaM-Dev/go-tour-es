Declaración de control de flujo: for, if, else, switch y defer
Aprende a como controlar el flujo de tu código  con condicionales, loops, switches y defers.

Los autores de Go
https://golang.org

* For

Go solo tiene una estructura de bucle, el bucle `for`.

El bucle `for` básico tiene tres componentes separados por punto y coma:

- La declaración inicial: ejecutada antes de la primera iteración
- La expresión de la condición: evaluada antes de cada iteración
- La declaración posterior: ejecutada al final de cada iteración

La declaración de inicio sera a menudo una declaración de variable corta, y las
variables declaradas alli son visibles solo en el ambito de la declaración `for`.

El loop se detendrá una vez que la condición booleana evalué a falso.



*Nota:* a diferencia de otros lenguajes como C, Java, o JavaScript no hay paréntesis
alrededor de los tres componentes de la declaración `for` y las llaves `{`}` son
siempre requeridas.

.play flowcontrol/for.go

* For continuo

La instrucción inicial y posterior son opcionales.

.play flowcontrol/for-continued.go

* For es el while de Go.

En ese punto puedes soltar los puntos y coma: El `while` de C se escribe `for` en Go.

.play flowcontrol/for-is-gos-while.go

* Para siempre

Si omite la condición del bucle, se repetira para siempre, por lo que un bucle infinito se expresa de forma compacta.

.play flowcontrol/forever.go

* If

La declaración `if` de Go son como si fueran bucles `for`; la expresión no necesita
estar rodeada de paréntesis `(`)` pero las llaves `{`}` son requeridas.

.play flowcontrol/if.go

* If con una breve declaración

Al igual que `for`, la declaración `if` puede comenzar con una breve declaración para ejecutar antes de la condición.

Las variables declaradas por declaración solo están en el alcance hasta el final del `if`.

(Intenta usar `v` en la ultima declaración `return`)

.play flowcontrol/if-with-a-short-statement.go

* If y else

Las variables declaradas dentro de una declaración corta `if` también están disponibles dentro de 
cualquiera de los bloques `else`.

(Ambas llamadas a `pow` devuelven sus resultados antes de la llamada a `fmt.Println`
en el comienzo de `main`)

.play flowcontrol/if-and-else.go

* Ejercicio: Bucles y Funciones

Como una forma de jugar con funciones y bucles, implementemos una función de raíz cuadrada: dado un numero X, queremos encontrar el numero z para el cual z² es mas cercano a x.

Los ordenadores suelen calcular la raíz cuadrada de x mediante un bucle.
Partiendo de una estimación z, podemos ajustar z en función de que lo cerca que este z² de x,
produciendo una mejor estimación: 

	z -= (z*z - x) / (2*z)

La repetición de este ajuste hace que la suposición sea cada vez mejor hasta llegar
a una respuesta lo mas cercana posible a la raíz cuadrada real.

Implementa esto en la función `func`Sqrt` proporcionada.
Un buen punto de partida para z es 1, independientemente de la entrada.
Para empezar, repite el calculo 10 veces e imprime cada z por el camino.
Comprueba lo cerca que estés de la respuesta para distintos valores de x (1, 2, 3, ...)
y que lo rápido que mejora la estimación.

Pista: Para declarar e inicializar un valor de punto flotante,
dale una sintaxis de punto flotante o utiliza una conversión:

	z := 1.0
	z := float64(1)

A continuación, cambie la condición del bucle para que se detenga una vez que el valor haya dejado de 
cambiar (o solo cambie una cantidad muy pequeña).
Compruebe si son mas o menos de 10 iteraciones.
Pruebe otras conjeturas iniciales para z, como x, o x/2.
¿Que tan cerca están los resultados de tu función de [[https://golang.org/pkg/math/#Sqrt][math.Sqrt]] en la biblioteca estandar?

(*Nota:* Si te interesan los detalles del algoritmo, el z² - x anterior
es lo lejos que está z² de donde tiene que estar (x), y la división por 2z es la derivada
de z², para escalar cuánto ajustamos z en función de lo rápido que cambia z².
Este enfoque general se llama [[https://en.wikipedia.org/wiki/Newton%27s_method][método de Newton]].
Funciona bien para muchas funciones, pero especialmente bien para la raíz cuadrada).

.play flowcontrol/exercise-loops-and-functions.go

* Switch

Una sentencia `switch` es una forma corta de escribir una secuencia de sentencias `if`-`else`.
Ejecuta el primer caso cuyo valor es igual a la expresión de condición.

El `switch` de Go es como el de C, C++, Java, JavaScript y PHP,
excepto que Go sólo ejecuta el caso seleccionado, no todos los casos que le siguen.
En efecto, la sentencia `break` que se necesita al final de cada caso en esos
se proporciona automáticamente en Go.
Otra diferencia importante es que los casos switch de Go no necesitan
ser constantes, y los valores involucrados no necesitan ser enteros.

.play flowcontrol/switch.go

* Orden de evaluación de Switch

Switch evalúa los casos de arriba a abajo, deteniéndose cuando un caso tiene éxito.

(Por ejemplo,

	switch i {
	case 0:
	case f():
	}

no llama a `f` si `i==0`.)

#appengine: *Nota:* El tiempo en Go Playground siempre parece empezar en
#appengine: 2009-11-10 23:00:00 UTC, un valor cuyo significado se deja como
#appengine: ejercicio para los lectores.

.play flowcontrol/switch-evaluation-order.go

* Switch sin condición

Switch sin una condición es lo mismo que `switch`verdadero`.

Esta construcción puede ser una forma limpia de escribir largas cadenas if-then-else.

.play flowcontrol/switch-with-no-condition.go

* Defer

Una instrucción defer, aplaza la ejecución de una función hasta que el entorno devuelve
la función.

Los argumentos de la llamada diferida se evalúan inmediatamente, pero la llamada a la función
no se ejecuta hasta que la función que la rodea retorna.

.play flowcontrol/defer.go

* Apilando defers

Las llamadas a funciones diferidas se introducen en una pila. Cuando una función retorna, sus
llamadas diferidas se ejecutan en orden de último en entrar, primero en salir.

Para aprender mas acerca de la declaración defer lea esto
[[https://blog.golang.org/defer-panic-and-recover][defer panic y recover]].

.play flowcontrol/defer-multi.go

* Felicitaciones!

¡Has terminado esta lección!

Puedes ir hacia atrás de la lista de [[/list][módulos]] para saber que aprender a continuación, o sigue con la [[javascript:click('.next-page')][proxima lección]].
