Concurrencia
Go provee construcciones de concurrencia como parte del core del lenguaje. Esta lección presenta y entrega algunos ejemplos de como ellos pueden usarse.

Los Autores de Go
https://golang.org

* Gorutinas

Una _gorutina_ es un hilo ligero manejado por el runtime de Go.

	go f(x, y, z)

inicia una nueva gorutina

	f(x, y, z)

La evaluación de `f`, `x`, `y`, y `z` ocurre en la gorutina en curso y la ejecución de `f`  ocurre en la nueva gorutina.

Las gorutinas se ejecutan en el mismo espacio de direcciones, así que el acceso a memoria compartida debe estar sincronizado. El paquete [[https://golang.org/pkg/sync/][`sync`]] provee algunas primitivas útiles para ello, aunque no las necesitará mucho en Go ya que hay otras primitivas. (Ver en la siguiente diapositiva)

.play concurrency/goroutines.go

* Canales

Los canales son un conducto tipado a través del cual puede enviar y recibir valores con el operador de canal, `<-`.

	ch <- v    // Envía v al canal ch.
	v := <-ch  // Recibe desde ch, y
	           // asigna valor a v.

(El flujo de los datos sigue la dirección de la flecha.)

Como los mapas y slices, los canales deben crearse antes de usarse:

	ch := make(chan int)

De manera predeterminada, envíar y recibir se bloquea hasta que el otro lado esté listo. Esto permite a las gorutinas sincronizarse sin bloqueos explícitos o variables condicionales.

El código de ejemplo suma los números en un slice, distribuyendo el trabajo entre dos gorutinas.
Una vez que ambas gorutinas han completado sus cálculos, se calcula el resultado final.

.play concurrency/channels.go

* Canales con Buffer
A los canales se les puede aplicar un buffer. Proporcione la longitud del buffer como segundo argumento para que `make` inicialice un canal con buffer:
	ch := make(chan int, 100)

Los envíos a un canal con buffer bloquean solo cuando el buffer está lleno. Recibir se bloquea cuando el buffer está vacío.

Modifique el ejemplo para sobrepasar el buffer y ver que pasa.

.play concurrency/buffered-channels.go

* Range y Close
Quien envía puede `cerrar` un canal para indicar que no se enviarán más valores. Los receptores pueden comprobar si un canal ha sido cerrado asignando un segundo parámetro a la expresión de recepción:
	v, ok := <-ch

`ok` es `false` si no hay más valores para recibir y el canal está cerrado.

El loop `for`i`:=`range`c` recibe valores desde el canal repetidamente hasta que se cierra.

*Nota:* Solo quien envía debería cerrar un canal, nunca el receptor. Enviar a un canal cerrado causará un panic.

*Otra*nota:* Los canales no son archivos; usualmente no necesitas cerrarlos. Cerrarlos es solo necesario cuando el receptor debe ser avisado de que no llegarán mas valores, por ejemplo, para terminar un loop `range`.

.play concurrency/range-and-close.go

* Select

La declaración `select` permite que una gorutina espere a multiples operaciones de comunicación.

Un `select` bloquea hasta que uno de sus cases pueda ejecutarse, entonces lo ejecuta. Escoge un case al azar si varios de ellos están listos.

.play concurrency/select.go

* Selección por Default

Él case `default` en un `select` se ejecuta si no hay otro case listo.

Utilice un caso "default" para intentar enviar o recibir sin bloquear:

	select {
	case i := <-c:
		// use i
	default:
		// receiving from c would block
	}

.play concurrency/default-selection.go

* Ejercicio: Árboles Binarios Equivalentes

Pueden haber diferentes tipos de árboles binarios con la misma secuencia de valores. Por ejemplo, aquí hay dos arboles binarios guardando la secuencia 1, 1, 2, 3, 5, 8, 13.

.image /content/img/tree.png

Una función para verificar si dos árboles binarios guardan la misma secuencia es bastante compleja en la mayoría de lenguajes. Usaremos la concurrencia y los canales de Go para escribir una solución simple.

Este ejemplo usa el paquete `tree`, el cual define el tipo:

	type Tree struct {
		Left  *Tree
		Value int
		Right *Tree
	}


Continúe la descripción en la [[javascript:click('.next-page')][página siguiente]].

* Ejercicio: Árboles Binarios Equivalentes.

*1.* Implemente la función `Walk`.

*2.* Pruebe la función `Walk`.

La función tree.New(k) construye un árbol binario de estructura aleatoria (pero siempre ordenado) que contiene los valores `k`, `2k`, `3k`, ..., `10k`.

Crea un nuevo canal `ch` e inicia el recorrido:

	go Walk(tree.New(1), ch)

Entonces lee e imprime 10 valores por el canal. Deberían ser los números 1, 2, 3, ..., 10.

*3.* Implemente la función `Same` usando `Walk` para determinar si `t1` y `t2` almacenan los mismos valores.

*4.* Pruebe la función `Same`.

`Same(tree.New(1),`tree.New(1))` debería devolver true, y `Same(tree.New(1),`tree.New(2))` debería devolver false.

Puede encontrar la documentación de `Tree` [[https://godoc.org/golang.org/x/tour/tree#Tree][aquí]].

.play concurrency/exercise-equivalent-binary-trees.go

* sync.Mutex

Hemos visto cómo los canales son excelentes para la comunicación entre gorutinas.

¿Pero qué pasa si no necesitamos comunicación? ¿Qué pasa si solo queremos asegurarnos de que solo
una gorutina pueda acceder a una variable a la vez para evitar conflictos?

Este concepto es llamado _exclusión_mutua_, y el nombre convencional de la estructura de datos que lo proporciona es _mutex_. 

La librería estándar de Go provee la exclusión mutua con
[[https://golang.org/pkg/sync/#Mutex][`sync.Mutex`]] y sus dos métodos:

- `Lock (bloqueado)`
- `Unlock (desbloqueado)`

Podemos definir un bloque de código para que se ejecute en exclusión mutua rodeándolo
con una llamada a `Lock` y `Unlock` como se muestra en el método `Inc`.

También podemos usar "defer" para asegurarnos de que el mutex se desbloquee como en el método "Valor".

.play concurrency/mutex-counter.go

* Ejercicio: Rastreador Web

En este ejercicio, utilizarás las funciones de concurrencia de Go para paralelizar un rastreador web.

Modifique la función "Crawl" para recuperar URL en paralelo sin recuperar la misma URL dos veces.

_Pista_: puede mantener un caché de las URL que se han obtenido en un mapa, pero los mapas por sí solos no son
seguros para uso concurrente!

.play concurrency/exercise-web-crawler.go

* A dónde ir desde aquí...

#appengine: Puedes empezar por
#appengine: [[https://golang.org/dl/][Instalar Go]].

#appengine: Una vez tengas instalado Go, la
La
[[https://golang.org/doc/][Documentación de Go]] es un un gran espacio para
#appengine: continuar.
comenzar.
Contiene referencias, tutoriales, videos y más.

Para aprender a organizar y trabajar con código Go, lea [[https://golang.org/doc/code][Como escribir código Go]].

Si necesita ayuda con la librería estándar, vea la [[https://golang.org/pkg/][referencia de paquetes]]. Para ayuda con el lenguaje en sí, podría sorprenderse al ver que la [[https://golang.org/ref/spec][Especificación del Lenguaje]] es bastante legible.

Para explorar más a fondo el modelo de concurrencia de Go, vea
[[https://www.youtube.com/watch?v=f6kdp27TYZs][patrones de concurrencia de Go]]
([[https://talks.golang.org/2012/concurrency.slide][slides]])
y
[[https://www.youtube.com/watch?v=QDDwwePbDtw][Patrones avanzados de concurrencia de Go]]
([[https://talks.golang.org/2013/advconc.slide][slides]])
y lea
[[https://golang.org/doc/codewalk/sharemem/][Compartir memoria comunicándose]]

Para comenzar a escribir aplicaciones web, mire
[[https://vimeo.com/53221558][Un entorno de programación sencillo]]
([[https://talks.golang.org/2012/simple.slide][slides]])
y lea
[[https://golang.org/doc/articles/wiki/][Escribir aplicaciones web]] tutorial.

La [[https://golang.org/doc/codewalk/functions/][Funciones de primera clase en Go]] ofrece una perspectiva interesante sobre los tipos de funciones de Go.

El [[https://blog.golang.org/][Blog de Go]] tiene un gran archivo de artículos informativos sobre Go.

Visita [[https://golang.org][golang.org]] para mas.

