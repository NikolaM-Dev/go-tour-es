Métodos e interfaces
Esta lección, cubre métodos e interfaces, las construcciones que definen los objetos y su comportamiento.

Los autores de Go
https://golang.org

* Métodos

Go no tiene clases.
Sin embargo, puedes definir métodos en tipos.

Un método es una función con un argumento _receptor_ especial.

El receptor aparece en su propio argumento entre la palabra clave `func` y 
el nombre del método.

En este ejemplo, el método `Abs` tiene un receptor del tipo `Vertex` llamado `v`.

.play methods/methods.go

* Los métodos son funciones

Recuerda: un método es solo una función con un argumento receptor.

Aquí `Abs` escrito como una función regular sin ningún cambio en su funcionalidad.

.play methods/methods-funcs.go

* Métodos continuos

También, puedes declarar un método en tipos que no son una estructura

En este ejemplo, vemos un tipo numérico `MyFloat` con un método `Abs`.

Solo puedes declarar un método con un receptor cuyo tipo este definido en el mismo
paquete como el método.
No puedes declarar un método con un receptor cuyo tipo este definido en otro
paquete (que incluye los tipos integrados como `int`)

.play methods/methods-continued.go

* Receptores de puntero

Puedes declarar métodos con receptores de puntero.

Esto significa que el tipo de receptor tiene la sintaxis literal `*T` para algún tipo `T`.
(Además, `T` no puede ser un puntero como `*int`.)

Por ejemplo, acá el método `Scale` se define en `*Vertex`. 

Los métodos con receptores de punteros pueden modificar el valor al que el receptor
apunta (como `Scale` lo hace aquí).
Dado que los métodos a menudo necesitan modificar su receptor, los receptores de punteros son más
comunes que los receptores de valores.

Prueba eliminando el signo `*` de la declaración de la función `Scale` en la línea 16
y observa como cambia el comportamiento del programa.

Con un receptor de valor, el método `Scale` opera en una copia del valor 
`Vertex` original.
(Este comportamiento es igual para cualquier otro argumento de función.)
El método `Scale` debe tener un puntero receptor para cambiar el valor de `Vertex`
declarado en la función `main`.

.play methods/methods-pointers.go

* Punteros y funciones

Aquí vemos los métodos `Abs` y `Scale` reescritos como funciones.

Nuevamente, prueba eliminando el signo `*` de la línea 16
¿Puedes ver porque el comportamiento cambia?
¿Que más necesitas cambiar para que el ejemplo compile?

(Si no esta seguro, continúe a la siguiente página.)

.play methods/methods-pointers-explained.go

* Métodos y puntero indirecto

Comparando los anteriores dos programas, podrías haber notado que
funciones con un argumento de puntero deben tomar un puntero:

	var v Vertex
	ScaleFunc(v, 5)  // Error de compilación!
	ScaleFunc(&v, 5) // OK

mientras que los métodos con receptores de puntero toman o un valor o un puntero como el
receptor cuando ellos son llamados:

	var v Vertex
	v.Scale(5)  // OK
	p := &v
	p.Scale(10) // OK

Para la declaración `v.Scale(5)`, a pesar de que `v` es un valor y no un puntero,
el método con el receptor de puntero es llamado automáticamente.
Esto es porque, como conveniencia, Go interpreta la declaración `v.Scale(5)` como
`(&v).Scale(5)`, ya que el método `Scale` tiene un puntero receptor.

.play methods/indirection.go

* Métodos y puntero indirecto (2)

Lo equivalente ocurre en sentido inverso.

Las funciones que toman un argumento de valor deben tomar un valor de ese tipo específico:

	var v Vertex
	fmt.Println(AbsFunc(v))  // OK
	fmt.Println(AbsFunc(&v)) // Error de compilación!

Mientras que los métodos con receptores de valor toman un valor o un puntero como el
receptor cuando son llamadas:

	var v Vertex
	fmt.Println(v.Abs()) // OK
	p := &v
	fmt.Println(p.Abs()) // OK

En este caso, el método llama `p.Abs()` es interpretado como `(*p).Abs()`.

.play methods/indirection-values.go

* Eligiendo un valor o receptor de puntero

Hay dos razones para usar un receptor de puntero.

La primera es para que el método pueda modificar el valor al que apunta su receptor.

La segunda es para evitar copiar el valor en cada método llamado.
Esto puede ser más eficiente si el receptor es un struct largo, por ejemplo.

En este ejemplo, ambos `Scale` y `Abs` tienen el tipo de receptor `*Vertex`,
aunque el método `Abs` no necesita modificar su receptor.

En general, todos los métodos de un tipo determinado deben tener un valor o un puntero
receptor, pero no una mezcla de ambos.
(Veremos el porqué de esto en las siguentes paginas.)

.play methods/methods-with-pointer-receivers.go

* Interfaces

Un _interface_type_ se define como una conjunto de firmas de métodos 

Un valor del tipo interfaz puede contener cualquier valor que se implemente en esos métodos.

*Nota:* Hay un error en el ejemplo del código en la línea 22.
`Vertex` (el tipo de valor) no implementa `Abser` porque 
el método `Abs` esta definido solo en `*Vertex` (el tipo de puntero).

.play methods/interfaces.go

* Interfaces implícitas

Un tipo implementa una interfaz implementando sus métodos.
No hay una declaración explícita de intenciones, ni la palabra clave "implements" 

Las interfaces implícitas desacoplan la definición de una interfaz de su
implementación, que luego podría aparecer en cualquier paquete sin arreglo previo.

.play methods/interfaces-are-satisfied-implicitly.go

* Valores de interfaz

Debajo del capo, los valores de interfaz se pueden considerar como una tupla de un valor y un
tipo en concreto:

	(valor, tipo)

Un valor de interfaz contiene un valor de un tipo concreto subyacente específico.

Llamar a un método en un valor de interfaz ejecuta el método del mismo nombre en
su tipo subyacente.

.play methods/interface-values.go

* Valores de interfaz con valores subyacentes nulo

Si el valor en concreto dentro de la propia interfaz es nulo,
el método será llamado con un receptor nulo.

En otros lenguajes esto activaría una excepción de puntero nulo,
pero en Go es común escribir métodos que manejan con gracia ser llamados
con un receptor nulo (como el método `M` en este ejemplo.)

Tenga en cuenta que un valor de interfaz que contiene un valor concreto nulo no es considerado nulo en sí mismo.

.play methods/interface-values-with-nil.go

* Valores de interfaz nulo

Un valor de interfaz nulo no contiene ni un valor ni tipo en concreto.

Llamar a un método en una interfaz nula es un error de tiempo de ejecucion porque no hay 
ningún tipo dentro de la tupla de la interfaz para indicar que método _concreto_ llamar.

.play methods/nil-interface-values.go

* La interfaz vacía

El tipo de interfaz que específica cero métodos es conocida como una _interfaz_vacia:

	interface{}

Una interfaz vacía puede contener valores de cualquier tipo.
(Cada tipo implementa por lo menos cero metodos.)

Las interfaces vacías son utilizadas por el código que maneja valores de tipo desconocido.
Por ejemplo, `fmt.Print` toma cualquier número de argumentos del tipo `interface{}`.

.play methods/empty-interface.go

* Tipo aserciones

Una _aserción_de_tipo_ proporciona acceso al valor concreto subyacente de un valor de interfaz.

	t := i.(T)

Esta declaración afirma que la el valor de la interfaz `i` sostiene el tipo concreto `T`
y asigna el valor subyacente `T` a la variable `t`.

Si `i` no contiene a `T`, la declaración provocará un panic.

Para _probar_ si un valor de interfaz contiene un tipo específico,
una aserción de tipo puede devolver dos valores: el valor subyacente
y un valor booleano que informa si la afirmación tuvo éxito.

	t, ok := i.(T)

Si `i` contiene a `T`, entonces `t` será el valor subyacente y `ok` será verdadero.

Si no, `ok` será falso y `t` será el valor cero del tipo `T`,
y ningún panic ocurrira.

Tenga en cuenta la similitud entre esta sintaxis y la de leer un map.

.play methods/type-assertions.go

* Tipo switches

Un _tipo_switch_ es un constructor que permite varias aserciones tipo en serie. 

Un tipo switch es como una declaración switch regular, pero los casos en el tipo
switch especifican tipos (no valores), y esos valores son comparados contra
otros tipos de valores sostenidos por el valor de interfaz dado.

	switch v := i.(type) {
	case T:
		// acá v es de tipo T
	case S:
		// acá v es de tipo S
	default:
        // sin coincidencia; acá v tiene el mismo tipo que i
	}

La declaración en el tipo switch tiene la misma sintaxis que el tipo aserción `i.(T)`,
pero el tipo específico `T` es remplazado por la palabra clave `type`.

Esta declaración switch comprueba si el valor de la interfaz `*`
contiene un valor del tipo `T` o `S`.
En cada caso de `T` y `S`, la variable `v` será del tipo
`T` o `S` respectivamente y mantienen el valor que tiene `i`.
En el caso predeterminado (donde no hay ninguna coincidencia), la variable `v` es
del mismo tipo de interfaz y valor que `i`.

.play methods/type-switches.go

* Stringers

Una de las interfaces más ubicuas es [[//golang.org/pkg/fmt/#Stringer][`Stringer`]] definida por el paquete [[//golang.org/pkg/fmt/][`fmt`]]

	type Stringer interface {
		String() string
	}

Un `Striger` es un tipo que puede describirse a sí mismo como un string. El paquete `fmt`
(y muchos otros) buscan esta interfaz para imprimir valores.

.play methods/stringer.go

* Ejercicio: Stringers

Haga que el tipo `IPAddr` implemente `fmt.Stringer` para imprimir la dirección
como un cuarteto punteado.

Por ejemplo, `IPAddr{1,`2,`3,`4}` debería de imprimir como `"1.2.3.4"`.

.play methods/exercise-stringer.go

* Errores

Los programas de Go expresan el estado de error con valores de `error`

El tipo `error` es una interfaz de función incorporada similar a `fmt.Stringer`:

	type error interface {
		Error() string
	}

(Al igual que con `fmt.Stringer`, el paquete `fmt` busca la interfaz `error` cuando
imprime valores.)

Las funciones a menudo devuelven un valor de "error", y el código de llamada debe manejar los errores
probando si el error es igual a `nil`.

	i, err := strconv.Atoi("42")
	if err != nil {
		fmt.Printf("No se pudo convertir el número: %v\n", err)
		return
	}
	fmt.Println("Integer convertido:", i)

Un `error` nulo denota éxito; un `error` no nulo denota falla.

.play methods/errors.go

* Ejercicio: Errores

Copia la función `Sqrt` del [[/flowcontrol/8][ejercicio anterior]] y modifícalo para que retorne un valor de `error`.

`Sqrt` debería de retornar un error no nulo cuando se le da un número negativo, ya que no admite números complejos.

Crea un nuevo tipo

	type ErrNegativeSqrt float64

y conviértelo en un `error` dándole un

	func (e ErrNegativeSqrt) Error() string

metodo tal que `ErrNegativeSqrt(-2).Error()` retorne `"No` `se` `puede` `calcular` `la` `raíz` `cuadrada` `de` `un` `número` `negativo`: `-2"`

*Nota:* Una llamada a `fmt.Sprint(e)` dentro del método `Error` enviará el programa a un bucle infinito. Puede evitar esto convirtiendo `e` primero: `fmt.Sprint(float64(e))`.  ¿Por qué?

Cambie su función `Sqrt` para devolver un valor `ErrNegativeSqrt` cuando se le dé un número negativo

.play methods/exercise-errors.go

* Lectores

El paquete `io` específica la interfaz `io.Reader`,
que representa el final de lectura de un flujo de datos.

La librería estándar de Go contiene [[https://golang.org/search?q=Read#Global][muchas implementaciones]] de esta interfaz, incluidos archivos, conexiones de red, compresores, cifrados y otros.

La interfaz `io.Reader` tiene un método `Read`:

	func (T) Read(b []byte) (n int, err error)

`Read` llena el segmento de bytes dado con datos y devuelve el número de bytes
poblado y un valor de error. Devuelve un error `io.EOF` cuando la transmisión
termina

El código de ejemplo crea un 
[[//golang.org/pkg/strings/#Reader][`strings.Reader`]]
y consume su salida 8 bytes a la vez.

.play methods/reader.go

* Ejercicio: Lectores

Implementa un tipo `Reader` que emita un flujo infinito del carácter ASCII
`'A'`.

.play methods/exercise-reader.go

* Ejercicio: rot13Reader

Un patrón común es un [[https://golang.org/pkg/io/#Reader][io.Reader]] que envuelve otro `io.Reader`, modificando el flujo de alguna manera.

Por ejemplo, la función [[https://golang.org/pkg/compress/gzip/#NewReader][gzip.NewReader]] toma un `io.Reader` (un flujo de datos comprimidos) y devuelve un `*gzip.Reader` que también implementa `io.Reader` (un flujo de datos descomprimidos).

Implementar un `rot13reader` que implemente `io.reader` y lea desde un `io.reader`, modificando el flujo aplicando el cifrado de sustitución [[https://en.wikipedia.org/wiki/rot13][rot13]] a todos los caracteres alfabéticos.

El tipo `rot13Reader` es proporcionado por ti.
Conviértelo en un `io.Reader` implementando su método `Read`.

.play methods/exercise-rot-reader.go

* Imágenes

[[https://golang.org/pkg/image/#Image][El paquete image]] define la interfaz `Image`:

	package image

	type Image interface {
		ColorModel() color.Model
		Bounds() Rectangle
		At(x, y int) color.Color
	}

*Nota*: el valor devuelto `Rectángulo` del método `Bounds` es en realidad un
[[https://golang.org/pkg/image/#Rectangle][`image.Rectangle`]], ya que la declaración está dentro del paquete `image`


(Vea [[https://golang.org/pkg/image/#Image][la documentación]] para todos los detalles.)

Los tipos `color.Color` y `color.Model` también son interfaces, pero lo ignoraremos usando las implementaciones predefinidas `color.RGBA` y `color.RGBAModel`. Estas interfaces y tipos están especificados por [[https://golang.org/pkg/image/color/][image/paquete color]]

.play methods/images.go

* Ejercicio: Imágenes

¿Recuerdas él [[/moretypes/18][generador de imágenes]] que escribiste antes? Escribamos otro, pero esta vez devolverá una implementación de `image.Image` en lugar de una porción de datos.

Define tu propio tipo de `Imagen`, implemente [[https://golang.org/pkg/image/#Image][los métodos necesarios]] y llame a `pic.ShowImage`.

`Bounds` debería devolver un `image.Rectangle`, como `image.Rect(0,`0,`w,`h)`.

`ColorModel` debería devolver `color.RGBAModel`.

`At` debería devolver un color; el valor `v` en el último generador de imágenes corresponde a `color.RGBA{v,`v,`255,`255}` en este.

.play methods/exercise-images.go

* ¡Felicidades!

¡Has finalizado esta lección!

Puede volver a la lista de [[/list][modulos]] para encontrar qué aprender a continuación, o continuar con la [[javascript:click('.next-page')][siguiente lección]].
