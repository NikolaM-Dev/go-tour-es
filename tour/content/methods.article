Metodos y interfaces
Esta leccion, cubre metodos y interfaces, las construcciones que definen los objetos y su compartamiento.

Los autores de Go
https://golang.org

* Metodos

Go no tiene clases.
Sin embargo, puedes definir metodos en tipos.

Un metodo es una funcion con un argumento _receptor_ especial.

El receptor aparece en su propio argumento entre la palabra clave `func` y 
el nombre del metodo.

En este ejemplo, el metodo `Abs` tiene un receptor del tipo `Vertex` llamado `v`.

.play methods/methods.go

* Los metodos son funciones

Recuerda: un metodo es solo una funcion con un argumento receptor.

Aqui `Abs` escrito como una funcion regular con ningun cambio en su funcionalidad.

.play methods/methods-funcs.go

* Metodos continuos

Tambien, puedes declarar un metodo en tipos que no son una estructura

En este ejemplo, vemos un tipo numerico `MyFloat` con un metodo `Abs`.

Solo puedes declarar un metodo con un receptor cuyo tipo este definido en el mismo
paquete como el metodo.
No puedes declarar un metodo con un receptor cuyo tipo este definido en otro
paquete (que incluye los tipos integrados como `int`)

.play methods/methods-continued.go

* Receptores de puntero

Puedes declarar metodos con receptores de puntero.

Esto significa que el tipo de receptor tiene la sintaxis literal `*T` para algun tipo `T`.
(Ademas, `T` no puede ser un puntero como `*int`.)

Por ejemplo, aca el metodo `Scale` se define en `*Vertex`. 

Metodos con receptores de punteros pueden modificar el valor al que el receptor
apunta (como `Scale` lo hace aqui).
Dado que los metodos a menudo necesitan modificar su receptor, los receptores de punteros son mas
comunes que los receptores de valores.

Prueba eliminando el signo `*` de la declaracion de la funcion `Scale` en la linea 16
y observa como cambia el comportamiento del programa.

Con un receptor de valor, el metodo `Scale` opera en una copia del valor 
`Vertex` original.
(Este es el mismo compartamiento que para cualquier otro argumento de funcion.)
El metodo `Scale` debe tener un puntero receptor para cambiar el valor de `Vertex`
declarado en la funcion `main`.

.play methods/methods-pointers.go

* Punteros y funciones

Here we see the `Abs` and `Scale` methods rewritten as functions.

Nuevamente, prueba eliminando el signo `*` de la linea 16
¿Puedes ver porque el comportamiento cambia?
¿Que mas necesitas cambiar para que el ejemplo compile?

(Si no estas seguro, continue a la siguiente pagina.)

.play methods/methods-pointers-explained.go

* Metodos y puntero indirecto

Comparando los anteriores dos programas, podrias haber notado que
funciones con un argumento de puntero deben tomar un puntero:

	var v Vertex
	ScaleFunc(v, 5)  // Error de compilacion!
	ScaleFunc(&v, 5) // OK

mientras que los metodos con receptores de puntero toman o un valor o un puntero como el
receptor cuando ellos son llamados:

	var v Vertex
	v.Scale(5)  // OK
	p := &v
	p.Scale(10) // OK

para la declaracion `v.Scale(5)`, a pesar de que `v` es un valor y no un puntero,
el metodo con el receptor de puntero es llamado automaticamente.
esto es porque, como conveniencia, Go interpreta la declaracion `v.Scale(5)` como
`(&v).Scale(5)` ya que el metodo `Scale` tiene un puntero receptor.

.play methods/indirection.go

* Metodos y puntero indirecto (2)

Lo equivalente ocurre en sentido inverso.

Las funciones que toman un argumento de valor deben tomar un valor de ese tipo especifico:

	var v Vertex
	fmt.Println(AbsFunc(v))  // OK
	fmt.Println(AbsFunc(&v)) // Error de compilacion!

Mientras que los metodos con receptores de valor toman un valor o un puntero como el
receptor cuando son llamadas:

	var v Vertex
	fmt.Println(v.Abs()) // OK
	p := &v
	fmt.Println(p.Abs()) // OK

En este caso, el metodo llama `p.Abs()` es interpretado como `(*p).Abs()`.

.play methods/indirection-values.go

* Eligiendo un valor o receptor de puntero

Hay dos razones para usar un receptor de puntero.

La primera es para que el metodo pueda modificar el valor al que apunta su receptor.

La segunda es para evitar copiar el valour en cada metodo llamado.
Esto puede ser mas eficiente si el receptor es un struct largo, por ejemplo.

En este ejemplo, ambos `Scale` y `Abs` tienen el tipo de receptor `*Vertex`,
aunque el metodo `Abs` no necesita modificar su receptor.

En general, todos los metodos de un tipo determinado deben tener un valor o un puntero
receptor, pero no una mezcla de ambos.
(Veremos el porque de esto en las siguentes paginas.)

.play methods/methods-with-pointer-receivers.go

* Interfaces

Un _interface_type_ se define como una conjunto de firmas de metodos 

Un valor del tipo interface puede contener cualquier valor que se implemente en esos metodos.

*Nota:* Hay un error en el ejemplo del codigo en la linea 22.
`Vertex` (el tipo de valor) no implementa `Abser` porque 
el metodo `Abs` esta definido solo en `*Vertex` (el tipo de puntero).

.play methods/interfaces.go

* Interfaces implicitas

Un tipo implementa una interfaz implementando sus metodos.
No hay un declaracion explicita de intenciones, ni la palabra clave "implements" 

Las interfaces implicitas desacoplan la definicion de una interfaz de su
implementacion, que luego podria aparecer en cualquier paquete sin arreglo previo.

.play methods/interfaces-are-satisfied-implicitly.go

* Valores de interfaz

debajo del capo, los valores de interfaz se pueden considerar como una tupla de un valor y un
tipo en concreto:

	(valor, tipo)

Un valor de interfaz contiene un valor de un tipo concreto subyacente específico.

Llamar a un método en un valor de interfaz ejecuta el método del mismo nombre en
su tipo subyacente.

.play methods/interface-values.go

* Valores de interfaz con valores subyacentes nulo

Si el valor en concreto dentro de la propia interfaz es nulo,
el metodo sera llamado con un receptor nulo.

En otros lenguajes esto activaria una excepcion de puntero nulo,
pero en Go es comun escribir metodos que manejan con gracia ser llamados
con un receptor nulo (como el metodo `M` en este ejemplo.)

Tenga en cuenta que un valor de interfaz que contiene un valor concreto nulo es en sí mismo no nulo.

.play methods/interface-values-with-nil.go

* Valores de interfaz nulo

Un valor de interfaz nulo no contiene ni un valor ni tipo en concreto.

Calling a method on a nil interface is a run-time error because there is no
type inside the interface tuple to indicate which _concrete_ method to call.

.play methods/nil-interface-values.go

* The empty interface

The interface type that specifies zero methods is known as the _empty_interface_:

	interface{}

An empty interface may hold values of any type.
(Every type implements at least zero methods.)

Empty interfaces are used by code that handles values of unknown type.
For example, `fmt.Print` takes any number of arguments of type `interface{}`.

.play methods/empty-interface.go

* Type assertions

A _type_assertion_ provides access to an interface value's underlying concrete value.

	t := i.(T)

This statement asserts that the interface value `i` holds the concrete type `T`
and assigns the underlying `T` value to the variable `t`.

If `i` does not hold a `T`, the statement will trigger a panic.

To _test_ whether an interface value holds a specific type,
a type assertion can return two values: the underlying value
and a boolean value that reports whether the assertion succeeded.

	t, ok := i.(T)

If `i` holds a `T`, then `t` will be the underlying value and `ok` will be true.

If not, `ok` will be false and `t` will be the zero value of type `T`,
and no panic occurs.

Note the similarity between this syntax and that of reading from a map.

.play methods/type-assertions.go

* Type switches

A _type_switch_ is a construct that permits several type assertions in series.

A type switch is like a regular switch statement, but the cases in a type
switch specify types (not values), and those values are compared against
the type of the value held by the given interface value.

	switch v := i.(type) {
	case T:
		// here v has type T
	case S:
		// here v has type S
	default:
		// no match; here v has the same type as i
	}

The declaration in a type switch has the same syntax as a type assertion `i.(T)`,
but the specific type `T` is replaced with the keyword `type`.

This switch statement tests whether the interface value `i`
holds a value of type `T` or `S`.
In each of the `T` and `S` cases, the variable `v` will be of type
`T` or `S` respectively and hold the value held by `i`.
In the default case (where there is no match), the variable `v` is
of the same interface type and value as `i`.

.play methods/type-switches.go

* Stringers

One of the most ubiquitous interfaces is [[//golang.org/pkg/fmt/#Stringer][`Stringer`]] defined by the [[//golang.org/pkg/fmt/][`fmt`]] package.

	type Stringer interface {
		String() string
	}

A `Stringer` is a type that can describe itself as a string. The `fmt` package
(and many others) look for this interface to print values.

.play methods/stringer.go

* Exercise: Stringers

Make the `IPAddr` type implement `fmt.Stringer` to print the address as
a dotted quad.

For instance, `IPAddr{1,`2,`3,`4}` should print as `"1.2.3.4"`.

.play methods/exercise-stringer.go

* Errors

Go programs express error state with `error` values.

The `error` type is a built-in interface similar to `fmt.Stringer`:

	type error interface {
		Error() string
	}

(As with `fmt.Stringer`, the `fmt` package looks for the `error` interface when
printing values.)

Functions often return an `error` value, and calling code should handle errors
by testing whether the error equals `nil`.

	i, err := strconv.Atoi("42")
	if err != nil {
		fmt.Printf("couldn't convert number: %v\n", err)
		return
	}
	fmt.Println("Converted integer:", i)

A nil `error` denotes success; a non-nil `error` denotes failure.

.play methods/errors.go

* Exercise: Errors

Copy your `Sqrt` function from the [[/flowcontrol/8][earlier exercise]] and modify it to return an `error` value.

`Sqrt` should return a non-nil error value when given a negative number, as it doesn't support complex numbers.

Create a new type

	type ErrNegativeSqrt float64

and make it an `error` by giving it a

	func (e ErrNegativeSqrt) Error() string

method such that `ErrNegativeSqrt(-2).Error()` returns `"cannot`Sqrt`negative`number:`-2"`.

*Note:* A call to `fmt.Sprint(e)` inside the `Error` method will send the program into an infinite loop. You can avoid this by converting `e` first: `fmt.Sprint(float64(e))`. Why?

Change your `Sqrt` function to return an `ErrNegativeSqrt` value when given a negative number.

.play methods/exercise-errors.go

* Readers

The `io` package specifies the `io.Reader` interface,
which represents the read end of a stream of data.

The Go standard library contains [[https://golang.org/search?q=Read#Global][many implementations]] of this interface, including files, network connections, compressors, ciphers, and others.

The `io.Reader` interface has a `Read` method:

	func (T) Read(b []byte) (n int, err error)

`Read` populates the given byte slice with data and returns the number of bytes
populated and an error value. It returns an `io.EOF` error when the stream
ends.

The example code creates a
[[//golang.org/pkg/strings/#Reader][`strings.Reader`]]
and consumes its output 8 bytes at a time.

.play methods/reader.go

* Exercise: Readers

Implement a `Reader` type that emits an infinite stream of the ASCII character
`'A'`.

.play methods/exercise-reader.go

* Exercise: rot13Reader

A common pattern is an [[https://golang.org/pkg/io/#Reader][io.Reader]] that wraps another `io.Reader`, modifying the stream in some way.

For example, the [[https://golang.org/pkg/compress/gzip/#NewReader][gzip.NewReader]] function takes an `io.Reader` (a stream of compressed data) and returns a `*gzip.Reader` that also implements `io.Reader` (a stream of the decompressed data).

Implement a `rot13Reader` that implements `io.Reader` and reads from an `io.Reader`, modifying the stream by applying the [[https://en.wikipedia.org/wiki/ROT13][rot13]] substitution cipher to all alphabetical characters.

The `rot13Reader` type is provided for you.
Make it an `io.Reader` by implementing its `Read` method.

.play methods/exercise-rot-reader.go

* Images

[[https://golang.org/pkg/image/#Image][Package image]] defines the `Image` interface:

	package image

	type Image interface {
		ColorModel() color.Model
		Bounds() Rectangle
		At(x, y int) color.Color
	}

*Note*: the `Rectangle` return value of the `Bounds` method is actually an
[[https://golang.org/pkg/image/#Rectangle][`image.Rectangle`]], as the
declaration is inside package `image`.

(See [[https://golang.org/pkg/image/#Image][the documentation]] for all the details.)

The `color.Color` and `color.Model` types are also interfaces, but we'll ignore that by using the predefined implementations `color.RGBA` and `color.RGBAModel`. These interfaces and types are specified by the [[https://golang.org/pkg/image/color/][image/color package]]

.play methods/images.go

* Exercise: Images

Remember the [[/moretypes/18][picture generator]] you wrote earlier? Let's write another one, but this time it will return an implementation of `image.Image` instead of a slice of data.

Define your own `Image` type, implement [[https://golang.org/pkg/image/#Image][the necessary methods]], and call `pic.ShowImage`.

`Bounds` should return a `image.Rectangle`, like `image.Rect(0,`0,`w,`h)`.

`ColorModel` should return `color.RGBAModel`.

`At` should return a color; the value `v` in the last picture generator corresponds to `color.RGBA{v,`v,`255,`255}` in this one.

.play methods/exercise-images.go

* Congratulations!

You finished this lesson!

You can go back to the list of [[/list][modules]] to find what to learn next, or continue with the [[javascript:click('.next-page')][next lesson]].
