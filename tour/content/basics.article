Paquetes, variables y funciones.
Aprenda los componentes esenciales de cualquier programa en Go.

The Go Authors
https://golang.org

* Paquetes

Cada programa de Go se compone de paquetes.

Los programas en Go comienzan a ejecutarse en el paquete `main` que siempre debe existir como punto de entrada para el flujo del programa.

El programa que se muestra a la derecha está usando los paquetes con rutas de importación `"fmt"` y `"math/rand"`.

Por convención, el nombre del paquete es el mismo que el último elemento de la ruta de importación. Por ejemplo, el paquete `"math/rand"` comprende archivos que comienzan con la declaración `package`rand`. En cambio `"math"` viene siendo parte de la ruta donde se encuentra el paquete y a su vez tambien puede ser un paquete que comprende archivos que comienzan con la declaración `package`math`.

#appengine: *Nota:* El entorno en el que se ejecutan estos programas es
#appengine: determinista, por lo que cada vez que ejecute el programa de ejemplo
#appengine: `rand.Intn` devolverá el mismo número.
#appengine:
#appengine: (Para ver un número diferente, inicie el generador de números; ver [[https://golang.org/pkg/math/rand/#Seed][`rand.Seed`]].
#appengine: El tiempo es constante en el playground, por lo que deberá usar otra cosa como semilla.)

.play basics/packages.go

* Importaciones

El código que se muestra a la derecha agrupa las importaciones en una instrucción de importación "factorizada" entre paréntesis.

También se puede escribir varias declaraciones de importación, como:

	import "fmt"
	import "math"

Pero es un buen estilo o practica usar la declaración de importación factorizada cuando son multiples importaciones.

.play basics/imports.go

* Nombres exportados

En Go, un nombre se exporta si comienza con una letra mayúscula.
Por ejemplo, `Pizza` es un nombre exportado, al igual que `Pi`, que se exporta desde el paquete `math`.

Aquí `pizza` y `pi` no comienzan con una letra mayúscula, por lo que no se exportan.

Al importar un paquete, solo se puede hacer referencia a sus nombres exportados.
Cualquier nombre "no exportado" no es accesible desde fuera del paquete.

Ejecute el código. Observe el mensaje de error.

Para corregir el error, cambie el nombre de `math.pi` a `math.Pi` y vuelva a intentarlo.

.play basics/exported-names.go

* Funciones

Una función puede tomar cero o más argumentos.

En el ejemplo que se muestra a la derecha, `add` toma dos parámetros de tipo `int`.

Observar que el tipo viene _después_ del nombre de la variable.

(Para obtener más información sobre por qué los tipos tienen el aspecto que tienen, consulte el [[https://blog.golang.org/gos-declaration-syntax][artículo sobre la sintaxis de declaración de Go]].)

.play basics/functions.go

* Funciones continuación

Cuando dos o más parámetros de función con nombre consecutivos comparten el mismo tipo, se puede omitir el tipo de todos menos del último.

En el ejemplo, se acorta

	x int, y int

a:

	x, y int

.play basics/functions-continued.go

* Múltiples resultados

Una función puede devolver cualquier número de resultados.

La función `swap` mostrada a la derecha devuelve dos cadenas de texto.

.play basics/multiple-results.go

* Valores de retorno con nombre

Los valores de retorno de Go pueden ser nombrados. Si es así, se tratan como variables definidas en la parte superior de la función.

Estos nombres deben utilizarse para documentar el significado de los valores devueltos.

Una instrucción `return` sin argumentos devuelve los valores de retorno nombrados. Esto se conoce como retorno "desnudo" ("naked" return).

Las declaraciones de retorno desnudas deben usarse solo en funciones cortas, como en el ejemplo que se muestra aquí a la derecha. En funciones más largas pueden dañar la legibilidad.

.play basics/named-results.go

* Variables

La instrucción `var` declara una lista de variables; como en las listas de argumentos de función, el tipo es el último en la declaración.

Una sentencia `var` puede estar a nivel de paquete o de función. Ambos se muestran en el ejemplo de la derecha.

.play basics/variables.go

* Variables con inicializadores

Una declaración var puede incluir inicializadores, uno por variable.

Si hay un inicializador, se puede omitir el tipo; la variable tomará el tipo del inicializador.

Como se muestra en el ejemplo de la derecha se inicializan sin tipo.

.play basics/variables-with-initializers.go

* Declaración corta de variables 

Sólo dentro de una función, la declaración de asignación corta `:=` se puede usar en lugar de una declaración `var` con tipo implícito.

Fuera de una función, cada declaración comienza con una palabra clave (`var`, `func`, etc.), por lo que la construcción `:=` no está disponible en ese ámbito superior.

.play basics/short-variable-declarations.go

* Basic types

Go's basic types are

	bool

	string

	int  int8  int16  int32  int64
	uint uint8 uint16 uint32 uint64 uintptr

	byte // alias for uint8

	rune // alias for int32
	     // represents a Unicode code point

	float32 float64

	complex64 complex128

The example shows variables of several types,
and also that variable declarations may be "factored" into blocks,
as with import statements.

The `int`, `uint`, and `uintptr` types are usually 32 bits wide on 32-bit systems and 64 bits wide on 64-bit systems.
When you need an integer value you should use `int` unless you have a specific reason to use a sized or unsigned integer type.

.play basics/basic-types.go

* Zero values

Variables declared without an explicit initial value are given their
_zero_value_.

The zero value is:

- `0` for numeric types,
- `false` for the boolean type, and
- `""` (the empty string) for strings.

.play basics/zero.go

* Type conversions

The expression `T(v)` converts the value `v` to the type `T`.

Some numeric conversions:

	var i int = 42
	var f float64 = float64(i)
	var u uint = uint(f)

Or, put more simply:

	i := 42
	f := float64(i)
	u := uint(f)

Unlike in C, in Go assignment between items of different type requires an
explicit conversion.
Try removing the `float64` or `uint` conversions in the example and see what happens.

.play basics/type-conversions.go

* Type inference

When declaring a variable without specifying an explicit type (either by using the `:=` syntax or `var`=` expression syntax), the variable's type is inferred from the value on the right hand side.

When the right hand side of the declaration is typed, the new variable is of that same type:

	var i int
	j := i // j is an int

But when the right hand side contains an untyped numeric constant, the new variable may be an `int`, `float64`, or `complex128` depending on the precision of the constant:

	i := 42           // int
	f := 3.142        // float64
	g := 0.867 + 0.5i // complex128

Try changing the initial value of `v` in the example code and observe how its type is affected.

.play basics/type-inference.go

* Constants

Constants are declared like variables, but with the `const` keyword.

Constants can be character, string, boolean, or numeric values.

Constants cannot be declared using the `:=` syntax.

.play basics/constants.go

* Numeric Constants

Numeric constants are high-precision _values_.

An untyped constant takes the type needed by its context.

Try printing `needInt(Big)` too.

(An `int` can store at maximum a 64-bit integer, and sometimes less.)

.play basics/numeric-constants.go

* Congratulations!

You finished this lesson!

You can go back to the list of [[/list][modules]] to find what to learn next, or continue with the [[javascript:click('.next-page')][next lesson]].
